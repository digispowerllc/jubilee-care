generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_JCG__PRISMA_DATABASE_URL")
}

model Agent {
  id            String         @id @default(uuid())
  surname       String
  firstName     String
  otherName     String
  email         String
  phone         String
  nin           String         @unique
  state         String
  lga           String
  address       String
  emailHash     String         @unique
  phoneHash     String         @unique
  ninHash       String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  isActive      Boolean        @default(true)
  isAdmitted    Boolean        @default(false)
  isDeleted     Boolean        @default(false)
  profile       AgentProfile?
  oauthAccounts OAuthAccount[]

  @@index([emailHash])
  @@index([phoneHash])
  @@index([ninHash])
  @@index([state])
  @@index([lga])
  @@index([createdAt])
}

model AgentProfile {
  id             String    @id
  agentId        String    @unique
  email          String
  emailHash      String    @unique
  phone          String
  phoneHash      String    @unique
  accessCode     String    @default("")
  accessCodeHash String // Optional: hashed access code for quick auth checks
  passwordHash   String
  passportUrl    String    @default("")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deletedAt      DateTime?
  agent          Agent     @relation(fields: [id], references: [id], onDelete: Cascade)

  @@index([agentId])
  @@index([phoneHash])
  @@index([emailHash])
  @@index([accessCodeHash])
  @@index([createdAt])
}

model User {
  id                String    @id
  username          String    @unique
  passwordHash      String
  email             String    @unique
  verified          Int       @default(0)
  fullName          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  bio               String    @default("")
  country           String    @default("")
  state             String    @default("")
  city              String    @default("")
  address           String    @default("")
  phoneNumber       String    @unique
  phoneVerified     Boolean   @default(false)
  hasPin            Boolean   @default(false)
  pinHash           String?
  isBanned          Boolean   @default(false)
  passwordChangedAt DateTime?
  role              String    @default("user")
  sessions          Session[]
  roles             UserRole?

  @@index([username])
  @@index([email])
  @@index([phoneNumber])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([country])
  @@index([state])
  @@index([city])
  @@index([address])
  @@index([bio])
  @@index([phoneVerified])
  @@index([hasPin])
  @@index([isBanned])
  @@index([passwordChangedAt])
}

model UserRole {
  id   String @id
  role String @default("agent")
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model OAuthAccount {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  agentId    String
  createdAt  DateTime @default(now())
  agent      Agent    @relation(fields: [agentId], references: [id])

  @@unique([provider, providerId])
}

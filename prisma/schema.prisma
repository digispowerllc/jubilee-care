generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_JCG__PRISMA_DATABASE_URL")
}

model AuditLog {
  id        String      @id @default(cuid())
  action    AuditAction // Using enum instead of String
  details   String?
  ipAddress String      @default("unknown")
  userAgent String      @default("unknown")
  status    AuditStatus @default(SUCCESS)
  severity  Severity    @default(MEDIUM)
  metadata  Json?
  createdAt DateTime    @default(now())
  expiresAt DateTime?   @default(dbgenerated("(NOW() + interval '7 years')")) // GDPR compliance

  // Enhanced relationships
  agentId    String?
  agent      Agent?  @relation(fields: [agentId], references: [id], onDelete: SetNull)
  targetId   String? // ID of affected resource
  targetType String? // Type of affected resource (e.g., "ACCOUNT", "DATA")

  // Indexes (optimized for common queries)
  @@index([action])
  @@index([agentId])
  @@index([createdAt])
  @@index([severity])
  @@index([status])
  @@index([targetId, targetType])
  // Data retention policy
  @@map("audit_logs")
}

enum AuditAction {
  ACCOUNT_DELETION_REQUEST
  ACCOUNT_DEACTIVATION
  LOGIN_ATTEMPT
  LOGIN_SUCCESS
  PASSWORD_CHANGE
  PASSWORD_RESET
  DATA_EXPORT
  DATA_DELETION
  PERMISSION_CHANGE
  SYSTEM_EVENT
}

enum AuditStatus {
  SUCCESS
  FAILED
  PENDING
  REVERTED
}

enum Severity {
  LOW // Informational (e.g., login success)
  MEDIUM // Security-relevant (e.g., password change)
  HIGH // Sensitive action (e.g., account deactivation)
  CRITICAL // Destructive action (e.g., account deletion)
}

model Agent {
  id                 String    @id @default(uuid())
  fieldId            String
  surname            String
  firstName          String
  otherName          String
  email              String
  phone              String
  nin                String    @unique
  state              String
  lga                String
  address            String
  emailHash          String    @unique
  phoneHash          String    @unique
  ninHash            String    @unique
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt
  lastLoginAt        DateTime?
  lastLoginAttemptIp String?
  isActive           Boolean   @default(true)
  status             String    @default("")
  admittedAt         DateTime?
  deletedAt          DateTime?
  deletionReason     String?
  deactivatedAt      DateTime?
  deactivationReason String?
  avatarUrl          String    @default("")

  profile            AgentProfile?
  sessions           AgentSession[]
  oauthAccounts      OAuthAccount[]
  PasswordResetToken PasswordResetToken[]
  PasswordResetEvent PasswordResetEvent[]
  AuditLog           AuditLog[]
  DeletionSchedule   DeletionSchedule[]

  @@index([emailHash])
  @@index([phoneHash])
  @@index([ninHash])
  @@index([state])
  @@index([lga])
  @@index([createdAt])
  // Automatic data retention policy (7 years for compliance)
  @@map("agent")
}

model AgentProfile {
  id                    String    @id @default(uuid())
  agentId               String    @unique
  email                 String
  emailHash             String    @unique
  phone                 String
  phoneHash             String    @unique
  pin                   String    @default("")
  pinHash               String    @default("")
  passwordHash          String
  emailVerified         DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  passwordResetAttempts Int?
  accountLockedUntil    DateTime?
  lockoutCount          Int       @default(0)
  lastPasswordResetAt   DateTime?
  avatarUrl             String    @default("")

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  PasswordResetToken PasswordResetToken[]

  @@index([agentId])
  @@index([phoneHash])
  @@index([emailHash])
  @@index([pinHash])
  @@index([createdAt])
  // Automatic data retention policy (7 years for compliance)
  @@map("agent_profile")
}

model AgentSession {
  id        String    @id @default(cuid())
  token     String    @unique
  agentId   String
  agent     Agent     @relation(fields: [agentId], references: [id])
  ipAddress String?
  userAgent String?
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@index([agentId])
  @@index([expiresAt])
}

model DeletionSchedule {
  id           String    @id @default(cuid())
  agentId      String
  agent        Agent     @relation(fields: [agentId], references: [id])
  scheduledAt  DateTime
  deletionType String // "FULL_ACCOUNT" or "DATA_ONLY"
  completedAt  DateTime?
  createdAt    DateTime  @default(now())

  @@index([agentId])
  @@index([scheduledAt])
}

enum AgentStatus {
  ACTIVE
  DEACTIVATED
  PENDING_DELETION
  DELETED
}

model Lockout {
  id    String   @id // could be IP or account ID
  until DateTime

  // Automatic data retention policy (7 years for compliance)
  @@map("lockout")
}

model PasswordResetToken {
  id             String        @id @default(cuid())
  tokenHash      String        @unique
  agentId        String
  agent          Agent         @relation(fields: [agentId], references: [id])
  createdAt      DateTime      @default(now())
  expiresAt      DateTime
  usedAt         DateTime?
  AgentProfile   AgentProfile? @relation(fields: [agentProfileId], references: [id])
  agentProfileId String?

  @@index([agentId])
  @@index([expiresAt])
  // Automatic data retention policy (7 years for compliance)
  @@map("password_reset_token")
}

model PasswordResetEvent {
  id        String   @id @default(cuid())
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id])
  createdAt DateTime @default(now())
  ipAddress String
  userAgent String?

  @@index([agentId, createdAt])
  // Automatic data retention policy (7 years for compliance)
  @@map("password_reset_event")
}

model User {
  id                String    @id
  username          String    @unique
  passwordHash      String
  email             String    @unique
  verified          Int       @default(0)
  fullName          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  bio               String    @default("")
  country           String    @default("")
  state             String    @default("")
  city              String    @default("")
  address           String    @default("")
  phoneNumber       String    @unique
  phoneVerified     Boolean   @default(false)
  hasPin            Boolean   @default(false)
  pinHash           String?
  isBanned          Boolean   @default(false)
  passwordChangedAt DateTime?
  role              String    @default("user")
  sessions          Session[]
  roles             UserRole?

  @@index([username])
  @@index([email])
  @@index([phoneNumber])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([country])
  @@index([state])
  @@index([city])
  @@index([address])
  @@index([bio])
  @@index([phoneVerified])
  @@index([hasPin])
  @@index([isBanned])
  @@index([passwordChangedAt])
}

model UserRole {
  id   String @id
  role String @default("agent")
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)

  // Automatic data retention policy (7 years for compliance)
  @@map("user_role")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  userAgent String?
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  // Automatic data retention policy (7 years for compliance)
  @@map("session")
}

model OAuthAccount {
  id         String   @id @default(cuid())
  provider   String
  providerId String
  agentId    String
  createdAt  DateTime @default(now())
  agent      Agent    @relation(fields: [agentId], references: [id])

  @@unique([provider, providerId])
  // Automatic data retention policy (7 years for compliance)
  @@map("oauth_account")
}
